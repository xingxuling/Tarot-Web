diff --git a/node_modules/expo-ads-admob/android/build.gradle b/node_modules/expo-ads-admob/android/build.gradle
index 1234567..89abcdef 100644
--- a/node_modules/expo-ads-admob/android/build.gradle
+++ b/node_modules/expo-ads-admob/android/build.gradle
@@ -20,19 +20,11 @@ buildscript {
    }
  }
  
-// Creating sources with comments
-task androidSourcesJar(type: Jar) {
-  classifier = 'sources'
-  from android.sourceSets.main.java.srcDirs
-}
-
 afterEvaluate {
    publishing {
      publications {
        release(MavenPublication) {
          from components.release
-        // Add additional sourcesJar to artifacts
-        artifact(androidSourcesJar)
        }
      }
      repositories {
@@ -44,16 +36,23 @@ afterEvaluate {
 }
 
 android {
-  compileSdkVersion safeExtGet("compileSdkVersion", 30)
+  namespace "expo.modules.ads.admob"
+  
+  compileSdkVersion rootProject.ext.compileSdkVersion
+  buildToolsVersion rootProject.ext.buildToolsVersion
 
   compileOptions {
-    sourceCompatibility JavaVersion.VERSION_1_8
-    targetCompatibility JavaVersion.VERSION_1_8
+    sourceCompatibility JavaVersion.VERSION_11
+    targetCompatibility JavaVersion.VERSION_11
+  }
+
+  kotlinOptions {
+    jvmTarget = JavaVersion.VERSION_11.toString()
   }
 
   defaultConfig {
-    minSdkVersion safeExtGet("minSdkVersion", 21)
-    targetSdkVersion safeExtGet("targetSdkVersion", 30)
+    minSdkVersion rootProject.ext.minSdkVersion
+    targetSdkVersion rootProject.ext.targetSdkVersion
     versionCode 26
     versionName "12.0.1"
   }
@@ -64,7 +63,7 @@ android {
 
 dependencies {
   implementation project(':expo-modules-core')
-  api 'com.google.android.gms:play-services-ads:19.4.0'
+  api "com.google.android.gms:play-services-ads:${safeExtGet('playServicesAdsVersion', '22.5.0')}"
 
   implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${safeExtGet('kotlinVersion', '1.4.21')}"
 }
diff --git a/node_modules/expo-ads-admob/android/src/main/java/expo/modules/ads/admob/AdMobRewardedVideoAdModule.java b/node_modules/expo-ads-admob/android/src/main/java/expo/modules/ads/admob/AdMobRewardedVideoAdModule.java
index abcdef01..12345678 100644
--- a/node_modules/expo-ads-admob/android/src/main/java/expo/modules/ads/admob/AdMobRewardedVideoAdModule.java
+++ b/node_modules/expo-ads-admob/android/src/main/java/expo/modules/ads/admob/AdMobRewardedVideoAdModule.java
@@ -1,6 +1,10 @@
 package expo.modules.ads.admob;
 
+import androidx.annotation.NonNull;
 import com.google.android.gms.ads.AdRequest;
+import com.google.android.gms.ads.LoadAdError;
+import com.google.android.gms.ads.rewarded.RewardedAd;
+import com.google.android.gms.ads.rewarded.RewardedAdLoadCallback;
 import android.os.Bundle;
 
 @ExpoModule(name = "AdMobRewarded")
@@ -112,7 +116,7 @@
     try {
-        mRewardedAd = new RewardedAd(mActivityProvider.getCurrentActivity(), mAdUnitID);
+        RewardedAd.load(mActivityProvider.getCurrentActivity(), mAdUnitID, adRequest, new RewardedAdLoadCallback() {
+            @Override
+            public void onAdLoaded(@NonNull RewardedAd rewardedAd) {
+                mRewardedAd = rewardedAd;
+                promise.resolve(null);
+            }
+            @Override
+            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {
+                mRewardedAd = null;
+                promise.reject("E_AD_NOT_READY", "Rewarded ad failed to load: " + loadAdError.getMessage());
+            }
+        });
     } catch (Exception e) {
         promise.reject("E_AD_NOT_READY", "Failed to load rewarded ad: " + e.getMessage());
         return;
     }
-    mRewardedAd.loadAd(adRequest, new RewardedAdLoadCallback() {
-        @Override
-        public void onRewardedAdLoaded() {
-            promise.resolve(null);
-        }
-        @Override
-        public void onRewardedAdFailedToLoad(int errorCode) {
-            promise.reject("E_AD_NOT_READY", "Rewarded ad failed to load: " + errorCode);
-        }
-    });
 }

@@ -140,7 +144,7 @@
-        if (mRewardedAd == null || !mRewardedAd.isLoaded()) {
+        if (mRewardedAd == null) {
             promise.reject("E_AD_NOT_READY", "Ad is not ready");
             return;
         }
-        mRewardedAd.show(mActivityProvider.getCurrentActivity(), new RewardedAdCallback() {
+        mRewardedAd.show(mActivityProvider.getCurrentActivity(), rewardItem -> {
             @Override
-            public void onRewardedAdOpened() {
+            public void onAdOpened() {
                 sendEvent(REWARDED_VIDEO_AD_OPENED_EVENT);
             }
             @Override
-            public void onRewardedAdClosed() {
+            public void onAdClosed() {
                 sendEvent(REWARDED_VIDEO_AD_CLOSED_EVENT);
             }
             @Override
-            public void onUserEarnedReward(@NonNull RewardItem reward) {
+            public void onUserEarnedReward(@NonNull RewardItem rewardItem) {
                 Bundle reward = new Bundle();
-                reward.putInt("amount", reward.getAmount());
-                reward.putString("type", reward.getType());
+                reward.putInt("amount", rewardItem.getAmount());
+                reward.putString("type", rewardItem.getType());
                 sendEvent(REWARDED_VIDEO_USER_DID_EARN_REWARD_EVENT, reward);
             }
         });
